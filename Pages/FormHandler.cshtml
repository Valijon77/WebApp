@page "/pages/form/{id:long?}"
@model FormHandlerModel
@using Microsoft.AspNetCore.Mvc.RazorPages
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Mvc.ModelBinding
@using WebApp.Validation

<partial name="_Validation" />

<div class="m-2">
    <h5 class="bg-primary text-white text-center p-2">HTML Form</h5>

    <form asp-page="FormHandler" method="post" id="htmlform">
        <div class="form-group">
            <label>Name</label>
            <div><span asp-validation-for="Product_.Name" class="text-danger"></span></div>
            <input class="form-control" asp-for="Product_.Name" />
        </div>
        <div class="form-group">
            <label>Price</label>
            <div><span asp-validation-for="Product_.Price" class="text-danger"></span></div>
            <input class="form-control" asp-for="Product_.Price" />
        </div>
        <div class="form-group">
            <label>CategoryId</label>
            <div><span asp-validation-for="Product_.CategoryId" class="text-danger"></span></div>
            <input class="form-control" asp-for="Product_.CategoryId" />

        </div>
        <div class="form-group">
            <label>SupplierId</label>
            <div><span asp-validation-for="Product_.SupplierId" class="text-danger"></span></div>
            <input class="form-control" asp-for="Product_.SupplierId" />

        </div>
        @*<div class="form-group">
            <label>Category Name</label>
            @{ #pragma warning disable CS8602 }
            <input class="form-control" asp-for="Product_.Category.Name" />
            @{ #pragma warning restore CS8602 }
        </div>*@
        @*<div class="form-group">
            <label>Supplier</label>
            @{ #pragma warning disable CS8602 }
            <input class="form-control" asp-for="Product_.Supplier.Name" />
            @{ #pragma warning disable CS8602 }
        </div>*@
        <button type="submit" class="btn btn-primary mt-2">Submit</button>
    </form>

    @*<button asp-page="FormHandler" form="htmlform" class="btn btn-primary mt-2">
        Submit (Outside Form)
    </button>*@
</div>

@functions
{

    //[IgnoreAntiforgeryToken]
    public class FormHandlerModel : PageModel
    {
        private DataContext context;

        public FormHandlerModel(DataContext dbcontext)
        {
            context = dbcontext;
        }

        [BindProperty]
        public Product Product_ { get; set; } = new();

        //[BindProperty(Name = "Product_.Category")]
        //public Category Category_ { get; set; } = new();

        public async Task OnGetAsync(long id = 1)
        {
            Product_ = await context.Products.FirstAsync(p => p.ProductId == id);
        }

        public IActionResult OnPost()
        {
            //foreach(string key in Request.Form.Keys.Where(k => !k.StartsWith("_")))
            //{
            //    TempData[key] = string.Join(", ", Request.Form[key]);
            //}
            //TempData["name param"] = name;
            //TempData["price param"] = price.ToString();

            //if (ModelState.GetValidationState("Product_.Price") == ModelValidationState.Valid &&
            //        Product_.Price < 1)
            //{
            //    ModelState.AddModelError("Product_.Price", "Enter a positive price");
            //}

            //if (ModelState.GetValidationState("Product_.Price") == ModelValidationState.Valid &&
            //        ModelState.GetValidationState("Product_.Name") == ModelValidationState.Valid &&
            //        Product_.Price >100 && Product_.Name.ToLower().StartsWith("small"))
            //{
            //    ModelState.AddModelError("", "Small products cannot cost more than $100");
            //}

            //if (ModelState.GetValidationState("Product_.CategoryId") == ModelValidationState.Valid &&
            //        !context.Categories.Any(c => c.CategoryId == Product_.CategoryId))
            //{
            //    ModelState.AddModelError("Product_.CategoryId", "Enter an existing category ID!@");
            //}

            //if (ModelState.GetValidationState("Product_.SupplierId") == ModelValidationState.Valid &&
            //        !context.Suppliers.Any(s => s.SupplierId == Product_.SupplierId))
            //{
            //    ModelState.AddModelError("Product_.SupplierId", "Enter an existing supplier ID");
            //}

            if (ModelState.IsValid)
            {
                //TempData["product"] = System.Text.Json.JsonSerializer.Serialize(Product_);
                //TempData["category"] = System.Text.Json.JsonSerializer.Serialize(Category_);
                TempData["name"] = Product_.Name;
                TempData["price"] = Product_.Price.ToString();
                TempData["category id"] = Product_.CategoryId.ToString();
                TempData["supplier id"] = Product_.SupplierId.ToString();
                return RedirectToPage("FormResults");
            }
            else
            {
                ModelState.PromotePropertyErrors(nameof(Product_));
                return Page();
            }


        }
    }
}
